13.3  _thread模块#! /usr/bin/python
# -*-coding:UTF-8-*-

import _thread
from time import sleep
from datetime import datetime

date_time_format = '%y-%M-%d %H:%M:%S'

def date_time_str(date_time):
    return datetime.strftime(date_time, date_time_format)

def loop_one():
    print('+++线程一开始于:', date_time_str(datetime.now()))
    print('+++线程一休眠4秒')
    sleep(4)
    print('+++线程一休眠结束，结束于:', date_time_str(datetime.now()))

def loop_two():
    print('***线程二开始时间:', date_time_str(datetime.now()))
    print('***线程二休眠2秒')
    sleep(2)
    print('***线程二休眠结束，结束时间:', date_time_str(datetime.now()))

def main():
    print('------所有线程开始时间:', date_time_str(datetime.now()))
    _thread.start_new_thread(loop_one, ())
    _thread.start_new_thread(loop_two, ())
    sleep(6)
    print('------所有线程结束时间:', date_time_str(datetime.now()))

if __name__ == '__main__':
    main()

执行结果：
------所有线程开始时间: 16-44-06 21:44:05
+++线程一开始于: 16-44-06 21:44:05
+++线程一休眠4秒
***线程二开始时间: 16-44-06 21:44:05
***线程二休眠2秒
***线程二休眠结束，结束时间: 16-44-06 21:44:07
+++线程一休眠结束，结束于: 16-44-06 21:44:09
------所有线程结束时间: 16-44-06 21:44:11


#! /usr/bin/python
# -*-coding:UTF-8-*-

import _thread 
from time import sleep
from datetime import datetime 

loops = [4, 2]
date_time_format = '%y-%M-%d %H:%M:%S'

def date_time_str(date_time):
    return datetime.strftime(date_time, date_time_format)

def loop(n_loop, n_sec, lock):
    print('线程（', n_loop, '）开始执行:',
          date_time_str(datetime.now()), '，先休眠（', n_sec, '）秒')
    sleep(n_sec)
    print('线程（', n_loop, '）休眠结束，结束于:', date_time_str(datetime.now()))
    lock.release()

def main():
    print('---所有线程开始执行...')
    locks = []
    n_loops = range(len(loops))

    for i in n_loops:
        lock = _thread.allocate_lock()
        lock.acquire()
        locks.append(lock)

    for i in n_loops:
        _thread.start_new_thread(loop, (i, loops[i], locks[i]))

    for i in n_loops:
        while locks[i].locked(): pass

    print('---所有线程执行结束:', date_time_str(datetime.now()))

if __name__ == '__main__':
    main()

执行结果：
---所有线程开始执行...
线程（ 1 ）开始执行: 16-44-06 21:44:11 ，先休眠（ 2 ）秒
线程（ 0 ）开始执行: 16-44-06 21:44:11 ，先休眠（ 4 ）秒
线程（ 1 ）休眠结束，结束于: 16-44-06 21:44:13
线程（ 0 ）休眠结束，结束于: 16-44-06 21:44:15
---所有线程执行结束: 16-44-06 21:44:15




13.4  threading模块
#! /usr/bin/python
# -*-coding:UTF-8-*-

import threading 
from time import sleep
from datetime import datetime
  
loops = [4, 2] 
date_time_format = '%y-%M-%d %H:%M:%S'

def date_time_str(date_time):
    return datetime.strftime(date_time, date_time_format)

def loop(n_loop, n_sec):
    print('线程（', n_loop, '）开始执行:',
          date_time_str(datetime.now()), '，先休眠（', n_sec, '）秒')
    sleep(n_sec)
    print('线程（', n_loop, '）休眠结束，结束于:', date_time_str(datetime.now()))

def main():
    print('---所有线程开始执行:', date_time_str(datetime.now()))
    threads = []
    n_loops = range(len(loops))

    for i in n_loops:
        t = threading.Thread(target=loop, args=(i, loops[i]))
        threads.append(t)

    for i in n_loops:      # start threads
        threads[i].start()

    for i in n_loops:      # wait for all
        threads[i].join()    # threads to finish

    print('---所有线程执行结束于:', date_time_str(datetime.now()))

if __name__ == '__main__':
    main()

执行结果：
---所有线程开始执行: 16-44-06 21:44:15
线程（ 0 ）开始执行: 16-44-06 21:44:15 ，先休眠（ 4 ）秒
线程（ 1 ）开始执行: 16-44-06 21:44:15 ，先休眠（ 2 ）秒
线程（ 1 ）休眠结束，结束于: 16-44-06 21:44:17
线程（ 0 ）休眠结束，结束于: 16-44-06 21:44:19
---所有线程执行结束于: 16-44-06 21:44:19


#! /usr/bin/python
# -*-coding:UTF-8-*-

import threading 
from time import sleep
from datetime import datetime
  
loops = [4, 2]
date_time_format = '%y-%M-%d %H:%M:%S'

class ThreadFunc(object):
    def __init__(self, func, args, name=''):
        self.name = name
        self.func = func
        self.args = args

    def __call__(self):
        self.func(*self.args)

def date_time_str(date_time):
    return datetime.strftime(date_time, date_time_format)

def loop(n_loop, n_sec):
    print('线程（', n_loop, '）开始执行:',
          date_time_str(datetime.now()), '，先休眠（', n_sec, '）秒')
    sleep(n_sec)
    print('线程（', n_loop, '）休眠结束，结束于:', date_time_str(datetime.now()))

def main():
    print('---所有线程开始执行:', date_time_str(datetime.now()))
    threads = []
    nloops = range(len(loops))

    for i in nloops:  # create all threads
        t = threading.Thread(
            target=ThreadFunc(loop, (i, loops[i]), loop.__name__))
        threads.append(t)

    for i in nloops:  # start all threads
        threads[i].start()

    for i in nloops:  # wait for completion
        threads[i].join()

    print('---所有线程执行结束于:', date_time_str(datetime.now()))

if __name__ == '__main__':
    main()

执行结果：
---所有线程开始执行: 16-03-06 22:03:18
线程（ 0 ）开始执行: 16-03-06 22:03:18 ，先休眠（ 4 ）秒
线程（ 1 ）开始执行: 16-03-06 22:03:18 ，先休眠（ 2 ）秒
线程（ 1 ）休眠结束，结束于: 16-03-06 22:03:20
线程（ 0 ）休眠结束，结束于: 16-03-06 22:03:22
---所有线程执行结束于: 16-03-06 22:03:22


#! /usr/bin/python
# -*-coding:UTF-8-*-

import threading 
from time import sleep
from datetime import datetime
  
loops = [4, 2]
date_time_format = '%y-%M-%d %H:%M:%S'

class MyThread(threading.Thread):
    def __init__(self, func, args, name=''):
        threading.Thread.__init__(self)
        self.name = name
        self.func = func
        self.args = args

    def getResult(self):
        return self.res

    def run(self):
        print('starting', self.name, 'at:', date_time_str(datetime.now()))
        self.res = self.func(*self.args)
        print(self.name, 'finished at:', date_time_str(datetime.now()))

def date_time_str(date_time):
    return datetime.strftime(date_time, date_time_format)

def loop(n_loop, n_sec):
    print('线程（', n_loop, '）开始执行:',
          date_time_str(datetime.now()), '，先休眠（', n_sec, '）秒')
    sleep(n_sec)
    print('线程（', n_loop, '）休眠结束，结束于:', date_time_str(datetime.now()))

def main():
    print('---所有线程开始执行:', date_time_str(datetime.now()))
    threads = []
    n_loops = range(len(loops))

    for i in n_loops:
        t = MyThread(loop, (i, loops[i]),
        loop.__name__)
        threads.append(t)

    for i in n_loops:
        threads[i].start()

    for i in n_loops:
        threads[i].join()

    print('---所有线程执行结束于:', date_time_str(datetime.now()))

if __name__ == '__main__':
    main()

执行结果：
---所有线程开始执行: 16-22-06 22:22:20
starting loop at: 16-22-06 22:22:20
线程（ 0 ）开始执行: 16-22-06 22:22:20 ，先休眠（ 4 ）秒
starting loop at: 16-22-06 22:22:20
线程（ 1 ）开始执行: 16-22-06 22:22:20 ，先休眠（ 2 ）秒
线程（ 1 ）休眠结束，结束于: 16-22-06 22:22:22
loop finished at: 16-22-06 22:22:22
线程（ 0 ）休眠结束，结束于: 16-22-06 22:22:24
loop finished at: 16-22-06 22:22:24
---所有线程执行结束于: 16-22-06 22:22:24




13.5  线程同步
#! /usr/bin/python
# -*-coding:UTF-8-*-

import threading
from time import sleep
from datetime import datetime
  
date_time_format = '%y-%M-%d %H:%M:%S'

class MyThread (threading.Thread):
    def __init__(self, threadID, name, counter):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.counter = counter

    def run(self):
        print ("开启线程： " + self.name)
        # 获取锁，用于线程同步
        threadLock.acquire()
        print_time(self.name, self.counter, 3)
        # 释放锁，开启下一个线程
        threadLock.release()

def date_time_str(date_time):
    return datetime.strftime(date_time, date_time_format)

def print_time(threadName, delay, counter):
    while counter:
        sleep(delay)
        print ("%s: %s" % (threadName, date_time_str(datetime.now())))
        counter -= 1

def main():
    # 创建新线程
    thread1 = MyThread(1, "Thread-1", 1)
    thread2 = MyThread(2, "Thread-2", 2)

    # 开启新线程
    thread1.start()
    thread2.start()

    # 添加线程到线程列表
    threads.append(thread1)
    threads.append(thread2)

    # 等待所有线程完成
    for t in threads:
        t.join()
    print("退出主线程")

if __name__ == "__main__":
    threadLock = threading.Lock()
    threads = []
    main()

执行结果：
开启线程： Thread-1
开启线程： Thread-2
Thread-1: 16-15-06 23:15:25
Thread-1: 16-15-06 23:15:26
Thread-1: 16-15-06 23:15:27
Thread-2: 16-15-06 23:15:29
Thread-2: 16-15-06 23:15:31
Thread-2: 16-15-06 23:15:33
退出主线程




13.6  线程优先级队列
#! /usr/bin/python
# -*-coding:UTF-8-*-

import threading
import queue
from time import sleep

class MyThread (threading.Thread):
    def __init__(self, threadID, name, q):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.q = q

    def run(self):
        print ("开启线程：" + self.name)
        process_data(self.name, self.q)
        print ("退出线程：" + self.name)

def process_data(threadName, q):
    while not exitFlag:
        queueLock.acquire()
        if not workQueue.empty():
            data = q.get()
            queueLock.release()
            print ("%s processing %s" % (threadName, data))
        else:
            queueLock.release()
        sleep(1)

def main():
    global exitFlag
    exitFlag = 0
    threadList = ["Thread-1", "Thread-2", "Thread-3"]
    nameList = ["One", "Two", "Three", "Four", "Five"]

    threads = []
    threadID = 1

    # 创建新线程
    for tName in threadList:
        thread = MyThread(threadID, tName, workQueue)
        thread.start()
        threads.append(thread)
        threadID += 1

    # 填充队列
    queueLock.acquire()
    for word in nameList:
        workQueue.put(word)
    queueLock.release()

    # 等待队列清空
    while not workQueue.empty():
        pass

    # 通知线程是退出的时候了
    exitFlag = 1

    # 等待所有线程完成
    for t in threads:
        t.join()
    print ("退出主线程")

if __name__ == "__main__":
    queueLock = threading.Lock()
    workQueue = queue.Queue(10)
    main()

执行结果：
开启线程：Thread-1
开启线程：Thread-2
开启线程：Thread-3
Thread-3 processing One
Thread-2 processing Two
Thread-1 processing Three
Thread-3 processing Four
Thread-1 processing Five
退出线程：Thread-3
退出线程：Thread-1
退出线程：Thread-2
退出主线程
